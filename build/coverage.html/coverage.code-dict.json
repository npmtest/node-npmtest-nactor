{"/home/travis/build/npmtest/node-npmtest-nactor/test.js":"/* istanbul instrument in package npmtest_nactor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nactor/lib.npmtest_nactor.js":"/* istanbul instrument in package npmtest_nactor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nactor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nactor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nactor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nactor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nactor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nactor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nactor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nactor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nactor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nactor.__dirname + '/lib.npmtest_nactor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nactor/node_modules/nactor/lib/factory.js":"\nvar Actor = require(\"./actor\"),\n    Proxy =  require(\"./proxy\");\n\nfunction create(config) {\n    var actor = new Actor(config);\n    \n    var proxy = new Proxy(actor);\n\n    actor._on(function(event,data){\n        proxy._emitter.emit(event,data);\n    });\n    return proxy;\n}\n\nmodule.exports = {\n    actor : create\n};\n","/home/travis/build/npmtest/node-npmtest-nactor/node_modules/nactor/lib/actor.js":"\nvar Async = require(\"./async\")\n\nvar Actor = function(config) {\n    this._config = config;\n    \n    // The context of actor\n    this._context = {};\n    \n    // The interface of the actor\n    this._iface = undefined;\n    \n    this._queue = [];\n    \n    // The processing message\n    this._message = undefined;\n    \n    // The state of the actor.\n    this._state = \"IDLE\";\n    \n    // Event listner\n    this._listener;\n}\n\nActor.prototype.init = function(options) {\n\n   var config = this._config;\n   var self = this;\n\n\t// Construct a message object according to the parameters\n    var message = function() {\n\t\tvar ret = {}\n\t\tswitch (typeof arguments[0]) {\n\t\t\tcase \"function\":\n\t\t\t\tret.method = arguments[0];\n\t\t\t\t\n\t\t\t\t// It is not suggest to pass parameters in anonymous\n\t\t\t\t// This code is used to handle the reply of post method.\n\t\t\t\t// Therefore , anonymous function do not accept callback paramter.\n\t\t\t\tret.params = arguments[1];\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\tcase \"string\":\n\t\t\t\tret.method = arguments[0];\n\t\t\t\t\n\t\t\t\tif (arguments.length == 3){\n\t\t\t\t\tret.params = arguments[1];\n\t\t\t\t\tret.callback = wrapper(arguments[2]);\n\t\t\t\t} else if (arguments.length == 2) {\n\t\t\t\t\tif (typeof arguments[1] == \"function\") \n\t\t\t\t\t\tret.callback = wrapper(arguments[1]);\n\t\t\t\t\telse\n\t\t\t\t\t\tret.params = arguments[1];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Invalid argument\");\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n\t\n\t// Wrapper of callback\n\tvar wrapper = function(func) {\n\t\treturn function(data) {\n\t\t\tself._context.post(func,data);\n\t\t}\n\t}\n\n   // Emit event from actor.\n   this._context.emit = function(event,data) {\n        \n        if (self._listener) {\n            process.nextTick(function(){\n                self._listener(event,data);\n            });\n        }\n   }\n\n   // Post a message to the event queue.\n    this._context.post = function() {\n\t\tvar msg = message.apply({},arguments);\n\t\tself._enqueue(msg);\n    }\n    \n    this._context.next = function() {\n\t\tvar msg = message.apply({},arguments);\n\t\tself._enqueue(msg,true);\t\t\n\t}\n   \n   this._context.actor = function(){\n        // Let's context be able to locale the actor object\n        return self;\n   }\n  \n\n   if (typeof config == \"object\"){\n   \n        this._iface = config;\n        for (var key in options) {\n            this._context[key] = options[key];\n        }\n        \n   } else if (typeof config == \"function\"){\n        this._iface = config.call(this._context,options);\n   } else {\n        throw new Error(\"Invalid argument\");\n   }\n   \n   return this._iface;\n}\n\nActor.prototype.send = function(method,params,cb) {\n    //console.log(\"Actor::send\" , method , params,cb);\n    var actor = this, \n         message = {\n            method : method,\n            params : params,\n            callback : cb\n        }\n    \n    this._enqueue(message);\n}\n\nActor.prototype._enqueue = function(message,prepend){\n\tif (prepend != true) {\n\t\tthis._queue.push(message);\n\t} else {\n\t\tthis._queue.unshift(message);\n\t}\n       \n\tthis.nextTick();\t\n}\n\n/** Ready to schedule next tick */\nActor.prototype.nextTick = function() {\n\tif (this._state != \"IDLE\")\n\t\treturn;\n\t\t\n    var self = this;\n    if (self._queue.length > 0){\n\t\tthis._state = \"QUEUED\";\n        process.nextTick(function(){\n            self.tick();\n        });\n    }\n}\n\n/** Process a message in a tick */\nActor.prototype.tick = function() {\n\n    if (this._queue.len <= 0) {\n\t\tthis._state = \"IDLE\";\n        return;\n    }\n\n\tthis._state = \"PROCESSING\";\n\n    var message = this._queue.shift(),\n         self = this,\n         reply;\n         \n    //console.log(\"Actor::tick\" , message);\n\n    var response = function(reply){ // Respone to the sender\n        if (message.callback)\n            message.callback(reply);\n        self._message = undefined;\n        self._state = \"IDLE\";\n        self.nextTick();\n    }\n\n    var async = new Async(function(reply){\n        response(reply);\n    });\n\n    message.async = async;\n    this._message  = message;\n    \n    try {\n\t\tif (typeof message.method == \"function\") { // Anonymous function\n\t\t\treply = message.method.call(this._context,message.params,async);\n\t\t} else {\n\t\t\treply = this._iface[message.method].call(this._context,message.params,async);\n\t\t}\n\n        if (!async.isEnabled()) {\n            response(reply);\n        }\n     } catch(err) {\n     \n        // An action object to let's user to choose to continue or stop the execution of actor's message queue\n        var action = {\n            _continue : true,\n            stop : function(){\n                this._continue = false;\n            }\n        };\n        \n        this._uncaughtExceptionHandler(err,action);\n        \n        if (action._continue) {\n\t\t\tthis._state = \"IDLE\";\n            this.nextTick();\n        }\n     }  \n}\n\n/** Get the processing message */\nActor.prototype.message = function() {\n    return this._message;\n}\n\n/** Register listener for any event */\nActor.prototype._on = function(callback){\n    this._listener = callback;\n}\n\nActor.prototype.onUncaughtException = function(callback){\n    this._uncaughtExceptionHandler = callback;\n}\n\nActor.prototype._uncaughtExceptionHandler = function(err,action) {\n    throw err;\n}\n\nmodule.exports = Actor;\n","/home/travis/build/npmtest/node-npmtest-nactor/node_modules/nactor/lib/async.js":"\n/** Async interface object\n * \n *  @constructor\n */\n\nAsync = function(done){\n    this._enabled = false;\n    this._done = done;\n}\n\n/** Enable the async operation  */\nAsync.prototype.enable = function(){\n    this._enabled = true;\n}\n\nAsync.prototype.isEnabled = function(){\n    return this._enabled;\n}\n\nAsync.prototype.reply  = function(args) {\n    this._done(args);\n}\n\nmodule.exports = Async\n","/home/travis/build/npmtest/node-npmtest-nactor/node_modules/nactor/lib/proxy.js":"\nvar EventEmitter = require('events').EventEmitter\n\n/** Convert an array like object to array */\nfunction toArray(obj){\n    var ret =[]\n    for (var i = 0 ; i < obj.length;i++){\n        ret.push(obj[i]);\n    }\n    return ret\n}\n\n/** A proxy of the actor object.\n * \n * User should not work on the actor directly , instead they\n * should work on the proxy object. \n * \n * A proxy object clones the user defined interfaces for\n * the target actor, but all the call is async and process\n * in sequential order. \n * \n * @constructor\n */\n\nvar Proxy = function(actor) {\n    var self = this;\n    this._actor = actor;\n    this._emitter = new EventEmitter();\n    actor.onUncaughtException(function(err,action){\n        self._uncaughtExceptionHandler(err,action);\n    });\n}\n\nProxy.prototype.init = function(options) {\n    var iface = this._actor.init(options),\n         self = this;\n         args = [\"\"];\n\n    for (var api in iface) {\n        var t = api;\n        this[api] = (function(method){\n            return function () {\n                var args = toArray(arguments);\n                args.unshift(method);\n                self.ask.apply(self,args);            \n            }\n        })(api);\n    }\n    \n}\n\nProxy.prototype.ask = function() {\n    var args,\n         method = \"\",\n         params = {},\n         cb;\n    \n    args = toArray(arguments);\n    \n    if (typeof args[0] == \"object\") { \n        // The first argument is a ref object. \n        // Just make it compitable with \"drama\"\n        args.shift();\n    }\n    \n    method = args[0];\n    args.shift();\n\n    if (args.length > 0 && typeof args[0] != \"function\"  ) { \n        // Parameters to the actor's method\n        \n        // Do not accept to pass function to actor. \n        // Reason: proxy.ask(\"hello\",function(){} ); <- That is callback or parameter?\n\n        params = args[0];\n        args.shift();\n    }\n\n    if (args.length > 0 && typeof args[0] == \"function\") { \n        // Callback\n        cb = args[0];\n        args.shift();\n    }\n    \n    if (args.length > 0)\n        throw Error(\"Invalid argument list!\");\n    \n    this._actor.send(method,params,cb);   \n}\n\nProxy.prototype.on = function(event,callback){\n    this._emitter.on(event,callback);\n}\n\nProxy.prototype.onUncaughtException = function(callback) {\n    this._uncaughtExceptionHandler = callback;\n}\n\nProxy.prototype._uncaughtExceptionHandler = function(err,action) {\n    throw err;\n}\n\nmodule.exports = Proxy;\n"}